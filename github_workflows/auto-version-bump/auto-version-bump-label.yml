name: Auto Version Bump Based on PR Labels

on:
  push:
    branches:
      - master

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
      
      - name: Find merged PR and labels
        id: find_pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the commit that triggered the workflow
            const commit = context.payload.head_commit;
            if (!commit) {
              core.setFailed('No head commit found.');
              return;
            }
            
            // Check if this is a merge commit
            if (!commit.message.startsWith('Merge pull request')) {
              // If it's not a PR merge, use the default patch bump
              core.setOutput('bump_type', 'patch');
              core.setOutput('pr_number', 'none');
              core.setOutput('pr_title', 'Direct commit to master');
              return;
            }
            
            // Extract PR number from commit message
            const prMatch = commit.message.match(/Merge pull request #(\d+)/);
            if (!prMatch) {
              core.setOutput('bump_type', 'patch');
              core.setOutput('pr_number', 'none');
              core.setOutput('pr_title', commit.message);
              return;
            }
            
            const prNumber = prMatch[1];
            
            // Get PR details
            try {
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              // Get PR labels
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
              });
              
              const labelNames = labels.map(label => label.name.toLowerCase());
              
              // Determine bump type
              let bumpType = 'patch'; // Default to patch
              
              if (labelNames.includes('major')) {
                bumpType = 'major';
              } else if (labelNames.includes('minor')) {
                bumpType = 'minor';
              } else if (labelNames.includes('patch')) {
                bumpType = 'patch';
              }
              
              core.setOutput('bump_type', bumpType);
              core.setOutput('pr_number', prNumber);
              core.setOutput('pr_title', pullRequest.title);
              console.log(`PR #${prNumber} with labels: ${labelNames.join(', ')}`);
              console.log(`Determined version bump type: ${bumpType}`);
            } catch (error) {
              console.log('Error retrieving PR information: ' + error.message);
              // Fall back to patch bump if we can't determine PR details
              core.setOutput('bump_type', 'patch');
              core.setOutput('pr_number', prNumber);
              core.setOutput('pr_title', 'Unknown PR title');
            }
      
      - name: Get latest release version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Try to get the latest release
              const { data: latestRelease } = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              // Extract version from tag (remove 'v' prefix if it exists)
              let currentVersion = latestRelease.tag_name;
              if (currentVersion.startsWith('v')) {
                currentVersion = currentVersion.substring(1);
              }
              
              core.setOutput('current_version', currentVersion);
              console.log(`Found latest release version: ${currentVersion}`);
            } catch (error) {
              if (error.status === 404) {
                // No releases found - start with 0.1.0
                console.log('No releases found. Starting with version 0.1.0');
                core.setOutput('current_version', '0.1.0');
              } else {
                console.log('Error getting latest release: ' + error.message);
                core.setFailed('Failed to get latest release version');
                return;
              }
            }
            
            // Always use semver format
            core.setOutput('version_format', 'semver');
      
      - name: Bump version based on label
        id: bump_version
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.current_version }}"
          BUMP_TYPE="${{ steps.find_pr.outputs.bump_type }}"
          
          # For semantic versioning (x.y.z)
          if [[ "${{ steps.get_version.outputs.version_format }}" == "semver" ]]; then
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            if [[ "$BUMP_TYPE" == "major" ]]; then
              # Increment major version, reset minor and patch
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="$NEW_MAJOR.0.0"
              echo "Bumping MAJOR version from $CURRENT_VERSION to $NEW_VERSION"
            elif [[ "$BUMP_TYPE" == "minor" ]]; then
              # Increment minor version, reset patch
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="$MAJOR.$NEW_MINOR.0"
              echo "Bumping MINOR version from $CURRENT_VERSION to $NEW_VERSION"
            else
              # Increment patch version
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
              echo "Bumping PATCH version from $CURRENT_VERSION to $NEW_VERSION"
            fi
          else
            # Simple increment for numeric versions
            NEW_VERSION=$((CURRENT_VERSION + 1))
            echo "Bumping version from $CURRENT_VERSION to $NEW_VERSION"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Tag and GitHub Release
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const newVersion = '${{ steps.bump_version.outputs.new_version }}';
            const tagName = `v${newVersion}`;
            const bumpType = '${{ steps.find_pr.outputs.bump_type }}';
            const currentVersion = '${{ steps.get_version.outputs.current_version }}';
            const prNumber = '${{ steps.find_pr.outputs.pr_number }}';
            const prTitle = '${{ steps.find_pr.outputs.pr_title }}';
            
            // Create a release
            try {
              const releaseData = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Release ${tagName}`,
                body: `## Release ${tagName}\n\n${bumpType} version bump from v${currentVersion} to ${tagName}\n\n${
                  prNumber !== 'none' ? `PR: #${prNumber} - ${prTitle}` : 'Direct commit to master'
                }`,
                draft: false,
                prerelease: false,
                generate_release_notes: true
              });
              
              console.log(`Created release: ${releaseData.data.html_url}`);
            } catch (error) {
              core.setFailed(`Failed to create release: ${error.message}`);
            }
